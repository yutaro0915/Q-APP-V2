# claim:
#   id: P2-API-Service-Reactions-ThreadUp
#   assignee: claude_agent
#   start_at: 2025-08-09T06:30:22Z
#   note: ""
id: P2-API-Service-Reactions-ThreadUp
phase: 2
layer: API
area: Service
action: Reactions-ThreadUp
target_file: backend/app/services/reactions_service.py
test_file: backend/tests/test_reactions_service.py
depends_on: ["P2-API-Repo-Reactions-UpsertUp", "P2-API-Schemas-Reactions"]
spec_refs:
  - "05"  # FastAPI設計
  - "04"  # APIコントラクト
  - "04a" # DTO定義
  - "04b" # API規約
  - "01"  # ドメイン不変条件
estimated_loc: 30

specification:
  purpose: "スレッドいいねリアクションサービスロジックの実装"
  
  content_requirements:
    - section: "ThreadUpServiceクラス"
      items:
        - "react_thread_up メソッド"
        - "引数: user_id, thread_id"
        - "バリデーション（thr_* 形式・スレ存在/未削除）"
        - "リポジトリの insert_up_if_absent を呼び出し、false の場合は CONFLICT を投げる"
        - "成功時は None（204 No Content）"
    
    - section: "バリデーション"
      items:
        - "thread_idの形式チェック（thr_*）"
        - "スレッドの存在確認"
        - "自分の投稿への制限（オプション）"
    
    - section: "処理フロー"
      items:
        - "入力バリデーション"
        - "リポジトリで INSERT ... ON CONFLICT DO NOTHING を実行"
        - "重複時は 409 Conflict を変換して送出（04b ErrorResponse）"
        - "成功時は 204 No Content"

  output_format: "Python サービスメソッド"

constraints:
  - "べき等性の保証"
  - "適切なエラーハンドリング"
  - "パフォーマンス最適化"

test_specification:
  validation:
    - "いいねリアクションが正しく処理されること"
    - "同じリアクション再実行で削除されること"
    - "存在しないスレッドでエラーになること"

definition_of_done:
  - "thread_up_reactionメソッドが実装されている"
  - "バリデーションが実装されている"
  - "テストが追加されている"