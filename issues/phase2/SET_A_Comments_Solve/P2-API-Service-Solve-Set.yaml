# claim:
#   id: P2-API-Service-Solve-Set
#   assignee: claude_agent
#   start_at: 2025-08-09T07:05:50Z
#   note: ""
id: P2-API-Service-Solve-Set
phase: 2
layer: API
area: Service
action: Solve-Set
target_file: backend/app/services/solve_service.py
test_file: backend/tests/test_solve_service.py
depends_on: ["P2-API-Repo-Comments-ListAsc", "P1-API-Repo-Threads-GetById"]
spec_refs:
  - "05"  # FastAPI設計
  - "04"  # APIコントラクト
  - "04a" # DTO定義
  - "04b" # API規約
  - "03a" # DDL
  - "01"  # ドメイン不変条件
estimated_loc: 40

specification:
  purpose: "コメントを解決済みに設定するサービスロジック実装"
  
  content_requirements:
    - section: "SolveServiceクラス"
      items:
        - "set_solved_comment メソッド"
        - "引数: user_id, thread_id, comment_id"
        - "権限チェック（スレッド投稿者のみ）"
        - "ビジネスルール適用"
    
    - section: "バリデーション"
      items:
        - "スレッドが「質問」タイプであること"
        - "コメントが存在し削除されていないこと"
        - "スレッド投稿者本人のみ実行可能"
        - "既に別のコメントが解決済みなら置換"
        - "不適用（質問以外）の場合は 400 VALIDATION_ERROR（details.reason=NOT_APPLICABLE, field=thread.tags）"
    
    - section: "処理フロー"
      items:
        - "スレッド情報取得・権限チェック"
        - "コメント存在チェック"
        - "既存解決コメントの解除"
        - "新しい解決コメントの設定"
        - "トランザクション管理"
        - "成功時は None（204 No Content）"

  output_format: "Python サービスメソッド"

constraints:
  - "厳密な権限チェック"
  - "データ整合性の保証"
  - "適切なエラーメッセージ"

test_specification:
  validation:
    - "質問スレッドで解決設定できること"
    - "話題スレッドでエラーになること"
    - "スレッド投稿者以外でエラーになること"

definition_of_done:
  - "set_solved_commentメソッドが実装されている"
  - "ビジネスルールが実装されている"
  - "テストが追加されている"
# done:
#   finished_at: 2025-08-09T07:09:11Z
#   result: GREEN
#   note: "SolveService with set_solved_comment method implemented. Thread ownership validation, question/non-question type detection, comment existence validation, support for replacing existing solved comments. Comprehensive test coverage with 7 test cases covering success, validation errors, and edge cases. All tests passing."
