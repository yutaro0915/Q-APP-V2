# claim:
#   id: P1-API-Router-Threads-GET-Detail-ReturnDTO
#   assignee: claude_agent
#   start_at: 2025-08-09T05:52:00Z
#   note: ""
id: P1-API-Router-Threads-GET-Detail-ReturnDTO
phase: 1
layer: API
area: Router
action: Threads-GET-Detail-ReturnDTO
target_file: backend/app/routers/threads.py
test_file: backend/tests/test_threads_router.py
depends_on: ["P1-API-Service-Threads-Get"]
spec_refs:
  - "04a"  # ThreadDetail DTO
estimated_loc: 10

specification:
  purpose: "GET /threads/{id} の返却が ThreadDetail になることを明確化"
  content_requirements:
    - "RouterはService.get_threadの戻り（ThreadDetail相当/None）をそのまま返す"
    - "404/400は util.errors の例外でハンドリング"

output_format: "ドキュメントのみ（実装変更無し）"

constraints:
  - "既にGREENのためコード変更は行わない"

definition_of_done:
  - "YAMLの追補で仕様が明確化される"

# === ThreadDetail Return DTO Specification ===
#
# GET /threads/{thread_id} endpoint returns ThreadDetail DTO:
#
# Response: ThreadDetail
# {
#   "id": "thr_*",               # Thread ID (ULID format)
#   "title": string,              # Thread title (max 60 chars)
#   "body": string,               # Full thread body (max 2000 chars)
#   "imageKey": string | null,    # S3 image key if exists
#   "tags": Tag[],                # Array of tags
#   "solved": boolean,            # True if thread is solved
#   "solvedCommentId": string | null,  # ID of solving comment
#   "isMine": boolean,            # True if owned by current user
#   "authorProfile": Profile | null,   # Author's profile if public
#   "createdAt": string,          # ISO8601 timestamp
#   "lastActivityAt": string      # ISO8601 timestamp
# }
#
# Router Implementation:
# - Calls ThreadService.get_thread(thread_id, user_id)
# - Service returns ThreadDetail or raises exceptions
# - Router passes through the ThreadDetail without modification
#
# Error Handling:
# - 400 Bad Request: Invalid thread ID format (ValidationException)
# - 404 Not Found: Thread doesn't exist (NotFoundException)
# - Both handled by FastAPI exception handlers in app.util.errors
