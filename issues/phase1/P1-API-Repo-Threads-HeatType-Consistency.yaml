# claim:
#   id: P1-API-Repo-Threads-HeatType-Consistency
#   assignee: claude_agent
#   start_at: 2025-08-09T05:50:00Z
#   note: ""
id: P1-API-Repo-Threads-HeatType-Consistency
phase: 1
layer: API
area: Repo
action: Threads-HeatType-Consistency
target_file: docs/03a_ddl_postgresql_v1.sql
test_file: backend/tests/test_threads_repo.py
depends_on: ["P1-API-Repo-Threads-Init"]
spec_refs:
  - "03a"  # DDL 定義
  - "05"   # Hot/heatの定義
estimated_loc: 5

specification:
  purpose: "DDLの threads.heat 型（INTEGER）と実装の初期値 0.0（float）の表現差異を明文化"
  content_requirements:
    - "現状はINSERT時 0.0 を渡してもPg側でINTEGERに丸められる想定。将来的に小数の熱量を扱う際は NUMERIC(6,3) 等に拡張する方針を備考に追記"

output_format: "ドキュメントのみ（DDLはフリーズのため変更なし）"

definition_of_done:
  - "方針がYAMLとして追記されている"

# === Heat Type Consistency Documentation ===
# 
# Current State:
# - DDL: threads.heat is defined as INTEGER
# - Implementation: Initial value is 0.0 (float) in repositories
# 
# Current Behavior:
# - PostgreSQL automatically rounds 0.0 to 0 when inserting into INTEGER column
# - No issues in Phase 1 as heat is not actively used
# 
# Future Enhancement Plan:
# - When implementing Hot feature (Phase 4), consider migrating to NUMERIC(6,3)
# - This would allow decimal heat values for more granular scoring
# - Example: heat = 12.345 would be stored as decimal
# - Migration would be: ALTER TABLE threads ALTER COLUMN heat TYPE NUMERIC(6,3)
# 
# Recommendation:
# - Keep as INTEGER for Phase 1-3 (no active use)
# - Reassess in Phase 4 when implementing Hot algorithm
# - If decimal precision needed, migrate to NUMERIC(6,3) or FLOAT
# done:
#   id: P1-API-Repo-Threads-HeatType-Consistency
#   assignee: claude_agent
#   end_at: 2025-08-09T05:51:00Z
#   note: "Documentation added for heat type consistency"
