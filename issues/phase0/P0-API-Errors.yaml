# claim:
#   id: P0-API-Errors
#   assignee: implementer
#   start_at: 2025-08-08T12:25:44Z
#   note: ""
id: P0-API-Errors
phase: 0
layer: API
area: Errors
action: Init
target_file: backend/app/util/errors.py
test_file: null
depends_on: []
spec_refs:
  - "04"  # OpenAPI
  - "04b" # API規約
estimated_loc: 80

specification:
  purpose: "APIエラーハンドリングとエラーレスポンス定義"
  
  content_requirements:
    - section: "エラーコード定義"
      items:
        - "VALIDATION_ERROR"
        - "UNAUTHORIZED"
        - "FORBIDDEN"
        - "NOT_FOUND"
        - "CONFLICT"
        - "RATE_LIMITED"
        - "INTERNAL"
    
    - section: "カスタム例外クラス"
      items:
        - "BaseAPIException基底クラス"
        - "BadRequestException"
        - "UnauthorizedException"
        - "ForbiddenException"
        - "NotFoundException"
        - "ConflictException"
        - "ValidationException"
    
    - section: "エラーレスポンスモデル"
      items:
        - "ErrorResponse Pydanticモデル"
        - "トップレベル error オブジェクト"
        - "error.code: 'VALIDATION_ERROR'|'UNAUTHORIZED'|'FORBIDDEN'|'NOT_FOUND'|'CONFLICT'|'RATE_LIMITED'|'INTERNAL'"
        - "error.message: str"
        - "error.details?: List[Dict[str, Any]]"
        - "error.requestId?: str"
    
    - section: "例外ハンドラー"
      items:
        - "カスタム例外ハンドラー関数"
        - "HTTPExceptionハンドラー"
        - "RequestValidationErrorハンドラー"

  output_format: "Python FastAPIエラーハンドリングコード"

constraints:
  - "04b_api_conventions_v1.mdのエラー形式に準拠"
  - "X-Request-Idを含める"
  - "構造化ログ出力"

test_specification:
  validation:
    - "各例外が正しいHTTPステータスコードを返すこと"
    - "エラーレスポンスが規定の形式であること"
    - "request_idが含まれること"

definition_of_done:
  - "errors.pyが作成されている"
  - "全てのエラーコードが定義されている"
  - "例外ハンドラーが実装されている"