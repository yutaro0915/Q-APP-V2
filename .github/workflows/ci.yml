name: CI

on:
  pull_request:
    branches: [main]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install 3.11
      
      - name: Install dependencies
        working-directory: backend
        run: |
          uv sync
      
      - name: Apply DDL
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
        run: |
          PGPASSWORD=test psql -h localhost -U test -d test -f docs/03a_ddl_postgresql_v1.sql
      
      - name: Run tests
        working-directory: backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
        run: |
          uv run pytest -v

  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run tests
        working-directory: frontend
        run: npm test

  check-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check changed files count (One-File Rule)
        run: |
          # PR内の変更ファイル数を確認（docs/とissues/を除く）
          changed_files=$(git diff --name-only origin/main...HEAD | grep -v '^docs/' | grep -v '^issues/' | grep -v '^\.github/' || true)
          count=$(echo "$changed_files" | grep -c . || echo 0)
          
          echo "Changed files: $count"
          echo "$changed_files"
          
          if [ $count -gt 2 ]; then
            echo "Error: More than 2 files changed (excluding docs/issues)"
            exit 1
          fi

      - name: Ensure CSV updated when PR opened
        if: github.event_name == 'pull_request'
        run: |
          if ! git diff --name-only origin/main...HEAD | grep -q '^docs/issues_progress_index.csv$'; then
            echo "Warning: docs/issues_progress_index.csv not updated in this PR"
          fi

      - name: Guard: implementation PR must reference an existing claim (and delete it)
        if: github.event_name == 'pull_request'
        run: |
          # 非メタ領域の変更がある場合（=実装PR想定）、対応する claim の削除を必須化
          changed_non_meta=$(git diff --name-only origin/main...HEAD | grep -v '^docs/' | grep -v '^issues/' | grep -v '^\.github/' || true)
          if [ -n "$changed_non_meta" ]; then
            echo "Detected non-meta changes:" && echo "$changed_non_meta"
            deleted_claims=$(git diff --name-status origin/main...HEAD | awk '$1=="D" {print $2}' | grep '^issues/_claims/' || true)
            added_claims=$(git diff --name-status origin/main...HEAD | awk '$1=="A" {print $2}' | grep '^issues/_claims/' || true)
            del_count=$(echo "$deleted_claims" | grep -c . || echo 0)
            add_count=$(echo "$added_claims" | grep -c . || echo 0)
            if [ $del_count -ne 1 ]; then
              echo "Error: Implementation PR must delete exactly one existing claim file under issues/_claims/."
              echo "Hint: まず claim 専用PRで issues/_claims/<ISSUE_ID>.claim を追加→ この実装PRでそのファイルを削除してください。"
              exit 1
            fi
            if [ $add_count -gt 0 ]; then
              echo "Error: Do not add claim files in implementation PR. Create a separate claim-only PR first."
              exit 1
            fi
          fi

      - name: Guard: claim-only PR must be unique
        if: github.event_name == 'pull_request'
        run: |
          # クレーム専用PR（issues/_claims/ のみ追加・変更）の一意性を確認
          all_changed=$(git diff --name-only origin/main...HEAD || true)
          changed_non_claim=$(echo "$all_changed" | grep -v '^issues/_claims/' | grep -v '^docs/' | grep -v '^issues/' | grep -v '^\.github/' || true)
          added_claims=$(git diff --name-status origin/main...HEAD | awk '$1=="A" {print $2}' | grep '^issues/_claims/' || true)
          if [ -z "$changed_non_claim" ] && [ -n "$added_claims" ]; then
            # PR が claim 追加だけで構成されている場合、既存重複をチェック
            for f in $added_claims; do
              if git cat-file -e origin/main:$f; then
                echo "Error: Claim already exists in main: $f"
                exit 1
              fi
            done
            echo "Claim uniqueness check passed."
          fi

  validate-spec:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'api-change')
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate OpenAPI spec
        run: |
          npx @apidevtools/swagger-cli validate docs/04_api_contract_v1.yaml

  lint-prompts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check agent prompts exist
        run: |
          test -f .claude/prompts/agent-impl.md
          test -f .claude/prompts/agent-review.md